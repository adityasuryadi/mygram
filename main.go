package main

import (
	usecase "mygram/applications/usecase"
	"mygram/commons/exceptions"
	config "mygram/infrastructures"
	dbConfig "mygram/infrastructures/database"
	repository "mygram/infrastructures/repository/postgres"
	"mygram/infrastructures/validation"
	handler "mygram/interfaces/http/api"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "mygram/docs"
)

// @title TEST API
// @version 2.0
// @description This is a sample API Example
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email fiber@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:5000
// @BasePath /
func main() {
	app := fiber.New(fiber.Config{ErrorHandler: exceptions.ErrorHandler})
	configApp := config.New()
	db:=dbConfig.NewPostgresDB(configApp)
	validate:=validation.NewValidation(db)

	// user
	userRepository:=repository.NewUserRepositoryPostgres(db)
	userUsecase:=usecase.NewUserUseCase(userRepository,validate)
	userHandler:=handler.NewUserHandler(userUsecase)
	userHandler.Route(app)

	// photo
	photoRepository := repository.NewPhotoRepository(db)
	photoUsecase := usecase.NewPhotoUsecase(photoRepository,userRepository,validate)
	photoHandler := handler.NewPhotoHandler(photoUsecase)
	photoHandler.Route(app)

	// comment
	commentRepository := repository.NewCommentRepository(db)
	commentUsecase := usecase.NewCommmentUsecase(commentRepository,userRepository,validate)
	commentHandler := handler.NewCommentHandler(commentUsecase)
	commentHandler.Route(app)

	// social media
	socialmediaRepository := repository.NewSocialmediaRepository(db)
	socialmediaUsecase := usecase.NewSocialmediaUsecase(socialmediaRepository,userRepository,validate)
	socialmediaHandler:=handler.NewSocialmediaHandler(socialmediaUsecase)
	socialmediaHandler.Route(app)

	app.Get("/swagger/*", swagger.HandlerDefault) // default
	app.Use(func(c *fiber.Ctx) error {
		return c.SendStatus(404) // => 404 "Not Found"
	})

	// Start App
	app.Listen(":5000")
}