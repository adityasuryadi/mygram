// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"mygram/applications/usecase"
	"mygram/commons/exceptions"
	"mygram/infrastructures"
	"mygram/infrastructures/database"
	"mygram/infrastructures/repository/postgres"
	"mygram/infrastructures/validation"
	"mygram/interfaces/http/api"
)

import (
	_ "mygram/docs"
)

// Injectors from injector.go:

func InitializeApp(filenames ...string) *fiber.App {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	userRepository := repository.NewUserRepositoryPostgres(db)
	userTokenRepository := repository.NewUserTokenRepository(db)
	validationValidation := validation.NewValidation(db)
	userUsecase := usecase.NewUserUseCase(userRepository, userTokenRepository, validationValidation)
	userHandler := handler.NewUserHandler(userUsecase)
	photoRepository := repository.NewPhotoRepository(db)
	photoUsecase := usecase.NewPhotoUsecase(photoRepository, userRepository, validationValidation)
	photoHandler := handler.NewPhotoHandler(photoUsecase)
	commentRepository := repository.NewCommentRepository(db)
	commentUsecase := usecase.NewCommmentUsecase(commentRepository, userRepository, validationValidation)
	commentHandler := handler.NewCommentHandler(commentUsecase)
	socialmediaRepository := repository.NewSocialmediaRepository(db)
	socialmediaUsecase := usecase.NewSocialmediaUsecase(socialmediaRepository, userRepository, validationValidation)
	socialMediaHandler := handler.NewSocialmediaHandler(socialmediaUsecase)
	permissionRepository := repository.NewPermissionRepository(db)
	permissionUsecase := usecase.NewPermissionUsecase(permissionRepository)
	permissionHandler := handler.NewPermissionHandler(permissionUsecase)
	roleRepository := repository.NewRoleRepository(db)
	roleUsecase := usecase.NewRoleUsecase(roleRepository)
	roleHandler := handler.NewRoleHandler(roleUsecase)
	app := NewServer(userHandler, photoHandler, commentHandler, socialMediaHandler, permissionHandler, roleHandler)
	return app
}

// injector.go:

var (
	userSet        = wire.NewSet(repository.NewUserRepositoryPostgres, repository.NewUserTokenRepository, usecase.NewUserUseCase, handler.NewUserHandler)
	photoSet       = wire.NewSet(repository.NewPhotoRepository, usecase.NewPhotoUsecase, handler.NewPhotoHandler)
	commentSet     = wire.NewSet(repository.NewCommentRepository, usecase.NewCommmentUsecase, handler.NewCommentHandler)
	socialmediaSet = wire.NewSet(repository.NewSocialmediaRepository, usecase.NewSocialmediaUsecase, handler.NewSocialmediaHandler)
	roleSet        = wire.NewSet(repository.NewRoleRepository, usecase.NewRoleUsecase, handler.NewRoleHandler)
	permissionSet  = wire.NewSet(repository.NewPermissionRepository, usecase.NewPermissionUsecase, handler.NewPermissionHandler)
)

func NewServer(
	userHandler handler.UserHandler,
	photoHandler handler.PhotoHandler,
	commentHandler handler.CommentHandler,
	socialmediaHandler handler.SocialMediaHandler,
	permissionHandler handler.PermissionHandler,
	roleHandler handler.RoleHandler,
) *fiber.App {
	app := fiber.New(fiber.Config{ErrorHandler: exceptions.ErrorHandler})
	userHandler.Route(app)
	photoHandler.Route(app)
	commentHandler.Route(app)
	socialmediaHandler.Route(app)
	permissionHandler.Route(app)
	roleHandler.Route(app)
	return app
}
