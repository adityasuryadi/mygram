// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"mygram/applications/usecase"
	"mygram/infrastructures"
	"mygram/infrastructures/database"
	"mygram/infrastructures/repository/postgres"
	"mygram/infrastructures/validation"
	"mygram/interfaces/http/api"
)

import (
	_ "mygram/docs"
)

// Injectors from injector.go:

func InitializedUserHandler(filenames ...string) handler.UserHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	userRepository := repository.NewUserRepositoryPostgres(db)
	validationValidation := validation.NewValidation(db)
	userUsecase := usecase.NewUserUseCase(userRepository, validationValidation)
	userHandler := handler.NewUserHandler(userUsecase)
	return userHandler
}

func InitializedPhotoHandler(filenames ...string) handler.PhotoHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	photoRepository := repository.NewPhotoRepository(db)
	userRepository := repository.NewUserRepositoryPostgres(db)
	validationValidation := validation.NewValidation(db)
	photoUsecase := usecase.NewPhotoUsecase(photoRepository, userRepository, validationValidation)
	photoHandler := handler.NewPhotoHandler(photoUsecase)
	return photoHandler
}

func InitializedCommentHandler(filenames ...string) handler.CommentHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	commentRepository := repository.NewCommentRepository(db)
	userRepository := repository.NewUserRepositoryPostgres(db)
	validationValidation := validation.NewValidation(db)
	commentUsecase := usecase.NewCommmentUsecase(commentRepository, userRepository, validationValidation)
	commentHandler := handler.NewCommentHandler(commentUsecase)
	return commentHandler
}

func InitializedSocialmediaHandler(filenames ...string) handler.SocialMediaHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	socialmediaRepository := repository.NewSocialmediaRepository(db)
	userRepository := repository.NewUserRepositoryPostgres(db)
	validationValidation := validation.NewValidation(db)
	socialmediaUsecase := usecase.NewSocialmediaUsecase(socialmediaRepository, userRepository, validationValidation)
	socialMediaHandler := handler.NewSocialmediaHandler(socialmediaUsecase)
	return socialMediaHandler
}

func InitializedRoleHandler(filenames ...string) handler.RoleHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	roleRepository := repository.NewRoleRepository(db)
	roleUsecase := usecase.NewRoleUsecase(roleRepository)
	roleHandler := handler.NewRoleHandler(roleUsecase)
	return roleHandler
}

func InitializedPermissionHandler(filenames ...string) handler.PermissionHandler {
	configConfig := config.New(filenames...)
	db := database.NewPostgresDB(configConfig)
	permissionRepository := repository.NewPermissionRepository(db)
	permissionUsecase := usecase.NewPermissionUsecase(permissionRepository)
	permissionHandler := handler.NewPermissionHandler(permissionUsecase)
	return permissionHandler
}

// injector.go:

var userSet = wire.NewSet(repository.NewUserRepositoryPostgres, usecase.NewUserUseCase, handler.NewUserHandler)

var photoSet = wire.NewSet(repository.NewPhotoRepository, repository.NewUserRepositoryPostgres, usecase.NewPhotoUsecase, handler.NewPhotoHandler)

var commentSet = wire.NewSet(repository.NewCommentRepository, repository.NewUserRepositoryPostgres, usecase.NewCommmentUsecase, handler.NewCommentHandler)

var socialmediaSet = wire.NewSet(repository.NewSocialmediaRepository, repository.NewUserRepositoryPostgres, usecase.NewSocialmediaUsecase, handler.NewSocialmediaHandler)

var roleSet = wire.NewSet(repository.NewRoleRepository, usecase.NewRoleUsecase, handler.NewRoleHandler)

var permissionSet = wire.NewSet(repository.NewPermissionRepository, usecase.NewPermissionUsecase, handler.NewPermissionHandler)
